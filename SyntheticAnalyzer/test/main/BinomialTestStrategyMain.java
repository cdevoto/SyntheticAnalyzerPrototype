package main;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import com.compuware.apm.ruxit.synth.analyzer.Analyzer;
import com.compuware.apm.ruxit.synth.analyzer.AnalyzerFactory;
import com.compuware.apm.ruxit.synth.analyzer.model.Attributes;
import com.compuware.apm.ruxit.synth.analyzer.model.TupleImpl;
import com.compuware.apm.ruxit.synth.analyzer.output.AnalyzerEvent;
import com.compuware.apm.ruxit.synth.analyzer.output.EventListener;
import com.compuware.apm.ruxit.synth.analyzer.resptime.BinomialTestResponseTimeAnalyzerFactory;
import com.compuware.apm.ruxit.synth.analyzer.resptime.config.ResponseTimeThresholdConfig;
import com.compuware.apm.ruxit.synth.analyzer.resptime.config.SimpleResponseTimeThresholdConfig;
import com.compuware.apm.ruxit.synth.analyzer.resptime.input.FileInputSource;
import com.compuware.apm.ruxit.synth.analyzer.resptime.input.InputSource;
import com.compuware.apm.ruxit.synth.analyzer.resptime.model.ResponseTimeAttributes;
import com.compuware.apm.ruxit.synth.analyzer.resptime.util.ResponseTimeStrategyUtil;



public class BinomialTestStrategyMain {

	public static void main(String[] args) throws IOException {
		String inputFile = "test-binomial-strategy.dat";
        String configFile = "config.properties";
        
        // If the name of the input file was included as a command-line arg, use it.
        if (args.length > 0) {
        	inputFile = args[0];
        }
        
        // Create an input source for the file containing the data to be analyzed
		InputSource inputSource = new FileInputSource(inputFile);

		// Create a properties object for the file containing the configuration settings
		Properties configProps = new Properties();
		try (InputStream configStream = new FileInputStream(configFile)) {
			configProps.load(configStream);
		}
		
		// Configure the thresholds which will be used for each entity
		Attributes keyAttributes = Attributes.newAttributes()
				.withAttribute(ResponseTimeAttributes.TEST_DEF_ID)
				.withAttribute(ResponseTimeAttributes.STEP_ID)
				.build();
		
		ResponseTimeThresholdConfig thresholds = SimpleResponseTimeThresholdConfig.newSimpleResponseTimeThresholdConfig(keyAttributes)
				.withThreshold(TupleImpl.newTuple(keyAttributes)
						.withValue(ResponseTimeAttributes.TEST_DEF_ID, "1")
						.withValue(ResponseTimeAttributes.STEP_ID, "1")
						.build(), 1.0)
				.withThreshold(TupleImpl.newTuple(keyAttributes)
						.withValue(ResponseTimeAttributes.TEST_DEF_ID, "1")
						.withValue(ResponseTimeAttributes.STEP_ID, "2")
						.build(), 1.0)
				.withThreshold(TupleImpl.newTuple(keyAttributes)
						.withValue(ResponseTimeAttributes.TEST_DEF_ID, "2")
						.withValue(ResponseTimeAttributes.STEP_ID, "1")
						.build(), 1.0)
				.withThreshold(TupleImpl.newTuple(keyAttributes)
						.withValue(ResponseTimeAttributes.TEST_DEF_ID, "2")
						.withValue(ResponseTimeAttributes.STEP_ID, "2")
						.build(), 1.0)
				.withThreshold(TupleImpl.newTuple(keyAttributes)
						.withValue(ResponseTimeAttributes.TEST_DEF_ID, "3")
						.withValue(ResponseTimeAttributes.STEP_ID, "1")
						.build(), 1.0)
				.build();
		
		// Create the analyzer
		AnalyzerFactory factory = BinomialTestResponseTimeAnalyzerFactory.newResponseTimeAnalyzerFactory()
				.withConfigProperties(configProps)
				.withInputSource(inputSource)
				.withThresholds(thresholds)
				.build();
		
		Analyzer analyzer = factory.newAnalyzer();
		
		// Set an event listener to write all events generated by the analyzer to the console
		analyzer.addEventListener(new EventListener() {
			
			@Override
			public void onEvent(AnalyzerEvent event) {
				String eventString = ResponseTimeStrategyUtil.toString(event);
				System.out.println(eventString);
			}
		});
		
		// Start and then stop the analyzer
		analyzer.start();
		analyzer.stop();
		
		
	}
}
